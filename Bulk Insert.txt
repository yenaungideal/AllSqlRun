   DataTable dt = new DataTable();
                        dt.Columns.AddRange(new DataColumn[2] 
                        { 
                            new DataColumn("SubConRFIID", typeof(Int32)),
                            new DataColumn("JointID",typeof(Int32)) 
                        });


http://www.codeproject.com/Articles/703634/SOLID-architecture-principles-using-simple-Csharp

   foreach (object[] item in fieldValues)
                        {
                            Int32 JointID = -1;

                            JointID = Convert.ToInt32(item[0]);
                            string PieceMarkNo = Convert.ToString(item[2]);

                            if (PieceMarkNo != null && PieceMarkNo.Trim().Length > 0
                                    && JointID > 0 && Session["CurrentRFIFitupID"] != null && Convert.ToInt32(Session["CurrentRFIFitupID"]) > 0)
                            {
                                dt.Rows.Add(Convert.ToInt32(Session["CurrentRFIFitupID"]), JointID);
                                //int retval = StructuralDataAccess.InsertSubConRequestDetails(Convert.ToInt32(Session["CurrentRFIFitupID"]), JointID, 0, -1, "", -1);
                            }
                        }

                        if (dt.Rows.Count > 0)
                        {
                            string consString = ConfigurationManager.ConnectionStrings["cuteexpress"].ConnectionString;
                            using (SqlConnection con = new SqlConnection(consString))
                            {
                                using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(con))
                                {
                                    //Set the database table name
                                    sqlBulkCopy.DestinationTableName = "dbo.BulkDB";

                                    //[OPTIONAL]: Map the DataTable columns with that of the database table
                                    sqlBulkCopy.ColumnMappings.Add("SubConRFIID", "SubConRFIID");
                                    sqlBulkCopy.ColumnMappings.Add("JointID", "JointID");
                                    con.Open();
                                    sqlBulkCopy.WriteToServer(dt);
                                    con.Close();
                                }
                            }
                        }

http://www.aspsnippets.com/Articles/Using-SqlBulkCopy-to-insert-bulk-data-from-GridView-to-database-in-ASPNet.aspx

------------------------------------------------------------------------------------------------------------------

CREATE TYPE [dbo].[BulkTempDB] AS TABLE
         (
         [SubConRFIID] [int]NOT NULL,
         [JointID] [int] NOT NULL
         )


USE [cuteQM]
GO
/****** Object:  StoredProcedure [dbo].[ST_InsertSubConRequestDetails]    Script Date: 7/1/2016 5:10:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ST_BulkInsert] 
	(@BulkTempDB BulkTempDB READONLY)
AS
BEGIN
			INSERT INTO [BulkDB]
            SELECT * FROM @BulkTempDB
END



 public static void ST_BulkInsert(DataTable dt)
        {
            try
            {
                string sqlCon = ConfigurationManager.ConnectionStrings["cuteexpress"].ConnectionString;
                SqlConnection conn = new SqlConnection(sqlCon);
                conn.Open();
                //Create a command object that calls the stored procedure
                SqlCommand cmdCustomer = new SqlCommand("ST_BulkInsert", conn);
                cmdCustomer.CommandType = CommandType.StoredProcedure;
                //Create a parameter using the new SQL DB type viz. Structured to pass as table value parameter
                SqlParameter paramCustomer = cmdCustomer.Parameters.Add("@BulkTempDB", SqlDbType.Structured);
                paramCustomer.Value = dt;
                //Execute the query
                cmdCustomer.ExecuteNonQuery(); 
               
            }
            catch (Exception ex)
            {
                throw (ex);
            }

        }








